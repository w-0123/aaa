"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _jsxRuntime() {
  const data = require("react/jsx-runtime");
  _jsxRuntime = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = _interopRequireWildcard(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _clsx() {
  const data = _interopRequireDefault(require("clsx"));
  _clsx = function () {
    return data;
  };
  return data;
}
function _icons() {
  const data = require("@react-vant/icons");
  _icons = function () {
    return data;
  };
  return data;
}
var _popup = _interopRequireDefault(require("../popup"));
var _loading = _interopRequireDefault(require("../loading"));
var _lockClick = require("./lock-click");
var _utils = require("../utils");
var _getDefaultProps = require("../utils/get-default-props");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const [bem] = (0, _utils.createNamespace)('toast');
const Toast = p => {
  const props = (0, _getDefaultProps.mergeProps)(p, {
    type: 'info',
    duration: 2000,
    position: 'middle',
    transition: 'rv-fade',
    loadingType: 'circular',
    overlay: false
  });
  const onClick = () => {
    if (props.closeOnClick) {
      props.onClose();
    }
  };
  (0, _react().useEffect)(() => {
    if (!props.visible) {
      (0, _lockClick.lockClick)(false);
      return;
    }
    let clickable = false;
    const newValue = props.visible && props.forbidClick;
    if (clickable !== newValue) {
      clickable = newValue;
      (0, _lockClick.lockClick)(clickable);
    }
  }, [props.visible, props.forbidClick]);
  const renderIcon = () => {
    const {
      icon,
      type,
      iconSize,
      loadingType
    } = props;
    const hasIcon = icon || type === 'success' || type === 'fail';
    if (hasIcon) {
      const buildInIcon = type === 'fail' ? (0, _jsxRuntime().jsx)(_icons().Cross, {}) : (0, _jsxRuntime().jsx)(_icons().Success, {});
      return _react().default.cloneElement(icon || buildInIcon, {
        className: (0, _clsx().default)(bem('icon')),
        fontSize: iconSize
      });
    }
    if (type === 'loading') {
      return (0, _jsxRuntime().jsx)(_loading.default, {
        className: (0, _clsx().default)(bem('loading')),
        type: loadingType
      });
    }
    return null;
  };
  const renderMessage = () => {
    const {
      message
    } = props;
    if ((0, _utils.isDef)(message) && message !== '') {
      return (0, _jsxRuntime().jsx)("div", Object.assign({
        className: (0, _clsx().default)(bem('info'))
      }, {
        children: message
      }));
    }
    return null;
  };
  return (0, _jsxRuntime().jsxs)(_popup.default, Object.assign({
    className: (0, _clsx().default)([bem([props.position, {
      [props.type]: !props.icon
    }]), props.className]),
    visible: props.visible,
    overlay: props.overlay,
    transition: props.transition,
    overlayClass: props.overlayClass,
    overlayStyle: props.overlayStyle,
    closeOnClickOverlay: props.closeOnClickOverlay,
    lockScroll: false,
    onClick: onClick,
    onClose: props.onClose,
    onClosed: props.onClosed,
    onOpened: props.onOpened,
    teleport: props.teleport
  }, {
    children: [renderIcon(), renderMessage()]
  }));
};
var _default = exports.default = Toast;