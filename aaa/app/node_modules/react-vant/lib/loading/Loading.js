"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _react() {
  const data = _interopRequireWildcard(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _jsxRuntime() {
  const data = require("react/jsx-runtime");
  _jsxRuntime = function () {
    return data;
  };
  return data;
}
function _clsx() {
  const data = _interopRequireDefault(require("clsx"));
  _clsx = function () {
    return data;
  };
  return data;
}
var _utils = require("../utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const SpinIcon = ({
  bem
}) => (0, _jsxRuntime().jsx)(_jsxRuntime().Fragment, {
  children: Array(12).fill(null)
  // eslint-disable-next-line react/no-array-index-key
  .map((_, index) => (0, _jsxRuntime().jsx)("i", {
    className: (0, _clsx().default)(bem('line', String(index + 1)))
  }, index))
});
const CircularIcon = ({
  bem
}) => (0, _jsxRuntime().jsx)("svg", Object.assign({
  className: (0, _clsx().default)(bem('circular')),
  viewBox: '25 25 50 50'
}, {
  children: (0, _jsxRuntime().jsx)("circle", {
    cx: '50',
    cy: '50',
    r: '20',
    fill: 'none'
  })
}));
const BallIcon = ({
  bem
}) => (0, _jsxRuntime().jsxs)("div", Object.assign({
  className: (0, _clsx().default)(bem('ball'))
}, {
  children: [(0, _jsxRuntime().jsx)("div", {}), (0, _jsxRuntime().jsx)("div", {}), (0, _jsxRuntime().jsx)("div", {})]
}));
const Icon = bem => ({
  spinner: (0, _jsxRuntime().jsx)(SpinIcon, {
    bem: bem
  }),
  circular: (0, _jsxRuntime().jsx)(CircularIcon, {
    bem: bem
  }),
  ball: (0, _jsxRuntime().jsx)(BallIcon, {
    bem: bem
  })
});
const [bem] = (0, _utils.createNamespace)('loading');
const Loading = props => {
  const {
    className,
    type = 'circular',
    vertical,
    color,
    size,
    textColor,
    children,
    textSize
  } = props;
  const spinnerStyle = (0, _react().useMemo)(() => Object.assign({
    color
  }, (0, _utils.getSizeStyle)(size)), [color, size]);
  const renderText = () => {
    if (children) {
      return (0, _jsxRuntime().jsx)("span", Object.assign({
        className: (0, _clsx().default)(bem('text')),
        style: {
          fontSize: (0, _utils.addUnit)(textSize),
          color: textColor !== null && textColor !== void 0 ? textColor : color
        }
      }, {
        children: children
      }));
    }
    return null;
  };
  return (0, _jsxRuntime().jsxs)("div", Object.assign({
    className: (0, _clsx().default)(className, bem([type, {
      vertical
    }])),
    style: props.style
  }, {
    children: [(0, _jsxRuntime().jsx)("span", Object.assign({
      className: (0, _clsx().default)(bem('spinner', type)),
      style: spinnerStyle
    }, {
      children: Icon(bem)[type]
    })), renderText()]
  }));
};
var _default = exports.default = Loading;