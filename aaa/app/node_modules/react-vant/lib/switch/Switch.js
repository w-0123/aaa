"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _react() {
  const data = _interopRequireWildcard(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _jsxRuntime() {
  const data = require("react/jsx-runtime");
  _jsxRuntime = function () {
    return data;
  };
  return data;
}
function _clsx() {
  const data = _interopRequireDefault(require("clsx"));
  _clsx = function () {
    return data;
  };
  return data;
}
var _useMergedState = _interopRequireDefault(require("../hooks/use-merged-state"));
var _loading = _interopRequireDefault(require("../loading"));
var _utils = require("../utils");
var _getDefaultProps = require("../utils/get-default-props");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const [bem] = (0, _utils.createNamespace)('switch');
const Swtich = p => {
  const props = (0, _getDefaultProps.mergeProps)(p, {
    activeValue: true,
    inactiveValue: false
  });
  const {
    loading,
    disabled,
    size,
    activeColor,
    inactiveColor
  } = props;
  const [checked, setChecked] = (0, _useMergedState.default)({
    value: props.checked,
    defaultValue: props.defaultChecked
  });
  const isChecked = (0, _react().useMemo)(() => checked === props.activeValue, [checked, props.activeValue]);
  const style = Object.assign({
    fontSize: (0, _utils.addUnit)(size),
    backgroundColor: isChecked ? activeColor : inactiveColor
  }, props.style);
  const onClick = e => {
    var _a, _b;
    if (!props.disabled) {
      (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);
    }
    if (!props.disabled && !props.loading) {
      const newValue = isChecked ? props.inactiveValue : props.activeValue;
      setChecked(newValue);
      (_b = props.onChange) === null || _b === void 0 ? void 0 : _b.call(props, newValue);
    }
  };
  const renderLoading = () => {
    if (props.loading) {
      const color = isChecked ? props.activeColor : props.inactiveColor;
      return (0, _jsxRuntime().jsx)(_loading.default, {
        className: (0, _clsx().default)(bem('loading')),
        color: color
      });
    }
    return null;
  };
  return (0, _jsxRuntime().jsx)("div", Object.assign({
    role: 'switch',
    tabIndex: 0,
    className: (0, _clsx().default)(props.className, bem({
      on: isChecked,
      loading,
      disabled
    })),
    style: style,
    "aria-checked": isChecked,
    onClick: onClick
  }, {
    children: (0, _jsxRuntime().jsx)("div", Object.assign({
      className: (0, _clsx().default)(bem('node'))
    }, {
      children: renderLoading()
    }))
  }));
};
var _default = exports.default = Swtich;