"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _react() {
  const data = _interopRequireWildcard(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _tslib() {
  const data = require("tslib");
  _tslib = function () {
    return data;
  };
  return data;
}
function _jsxRuntime() {
  const data = require("react/jsx-runtime");
  _jsxRuntime = function () {
    return data;
  };
  return data;
}
var _utils = require("../utils");
var _ConfigProviderContext = _interopRequireWildcard(require("./ConfigProviderContext"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function mapThemeVarsToCSSVars(themeVars, prefix) {
  const cssVars = {};
  Object.keys(themeVars).forEach(key => {
    if (key.toString().startsWith(`--${prefix}-`)) {
      cssVars[key] = themeVars[key];
    } else {
      cssVars[`--${prefix}-${(0, _utils.kebabCase)(key)}`] = themeVars[key];
    }
  });
  return cssVars;
}
const ConfigProvider = _a => {
  var {
      className,
      style,
      themeVars = {},
      tag = 'div',
      children
    } = _a,
    props = (0, _tslib().__rest)(_a, ["className", "style", "themeVars", "tag", "children"]);
  const TagElement = tag;
  const varStyle = (0, _react().useMemo)(() => {
    if (themeVars) {
      return Object.assign(Object.assign({}, style), mapThemeVarsToCSSVars(themeVars, 'rv'));
    }
    return style;
  }, [style, themeVars]);
  return (0, _jsxRuntime().jsx)(_ConfigProviderContext.default.Provider, Object.assign({
    value: Object.assign(Object.assign({}, _ConfigProviderContext.INITIAL_STATE), props)
  }, {
    children: (0, _jsxRuntime().jsx)(TagElement, Object.assign({
      className: className,
      style: varStyle
    }, {
      children: children
    }))
  }));
};
var _default = exports.default = ConfigProvider;