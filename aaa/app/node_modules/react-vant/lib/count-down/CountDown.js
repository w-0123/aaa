"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _react() {
  const data = _interopRequireWildcard(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _jsxRuntime() {
  const data = require("react/jsx-runtime");
  _jsxRuntime = function () {
    return data;
  };
  return data;
}
function _clsx() {
  const data = _interopRequireDefault(require("clsx"));
  _clsx = function () {
    return data;
  };
  return data;
}
var _utils = require("../utils");
var _useCountDown = _interopRequireDefault(require("../hooks/use-count-down"));
var _utils2 = require("./utils");
var _getDefaultProps = require("../utils/get-default-props");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const [bem] = (0, _utils.createNamespace)('count-down');
const CountDown = (0, _react().forwardRef)((p, ref) => {
  const props = (0, _getDefaultProps.mergeProps)(p, {
    autoStart: true,
    time: 0,
    format: 'HH:mm:ss',
    onChange: _utils.noop,
    onFinish: _utils.noop
  });
  const {
    start,
    pause,
    reset,
    current
  } = (0, _useCountDown.default)({
    time: +props.time,
    millisecond: props.millisecond,
    onChange: props.onChange,
    onFinish: props.onFinish
  });
  const timeText = (0, _react().useMemo)(() => (0, _utils2.parseFormat)(props.format, current), [current]);
  const resetTime = () => {
    reset(+props.time);
    if (props.autoStart) {
      start();
    }
  };
  (0, _react().useEffect)(() => {
    resetTime();
    return () => {
      pause();
    };
  }, [props.time]);
  (0, _react().useImperativeHandle)(ref, () => ({
    start,
    pause,
    reset: resetTime
  }));
  return (0, _jsxRuntime().jsx)("div", Object.assign({
    className: (0, _clsx().default)(props.className, bem()),
    style: props.style
  }, {
    children: props.children ? props.children(current) : timeText
  }));
});
var _default = exports.default = CountDown;