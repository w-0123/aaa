"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _jsxRuntime() {
  const data = require("react/jsx-runtime");
  _jsxRuntime = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = _interopRequireWildcard(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _clsx() {
  const data = _interopRequireDefault(require("clsx"));
  _clsx = function () {
    return data;
  };
  return data;
}
var _utils = require("../utils");
var _hooks = require("../hooks");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const [bem] = (0, _utils.createNamespace)('image');
const Image = props => {
  const [status, setStatus] = (0, _hooks.useSetState)({
    loading: true,
    error: false
  });
  const imgRef = (0, _react().useRef)(null);
  const {
    fit,
    errorIcon,
    loadingIcon,
    showError,
    showLoading,
    block
  } = props;
  const style = (0, _react().useMemo)(() => {
    const internalStyle = Object.assign({}, props.style);
    if ((0, _utils.isDef)(props.width)) {
      internalStyle.width = (0, _utils.addUnit)(props.width);
    }
    if ((0, _utils.isDef)(props.height)) {
      internalStyle.height = (0, _utils.addUnit)(props.height);
    }
    if ((0, _utils.isDef)(props.radius)) {
      internalStyle.overflow = 'hidden';
      internalStyle.borderRadius = (0, _utils.addUnit)(props.radius);
    }
    return internalStyle;
  }, [props.style, props.width, props.height, props.radius]);
  (0, _react().useEffect)(() => {
    const payload = {
      error: false,
      loading: true
    };
    if (imgRef.current) {
      if (imgRef.current.complete) {
        payload.loading = false;
      } else {
        payload.loading = true;
      }
    }
    setStatus(payload);
  }, [props.src]);
  const onLoad = e => {
    var _a;
    setStatus({
      loading: false
    });
    (_a = props.onLoad) === null || _a === void 0 ? void 0 : _a.call(props, e);
  };
  const onError = e => {
    var _a;
    setStatus({
      error: true,
      loading: false
    });
    (_a = props.onLoad) === null || _a === void 0 ? void 0 : _a.call(props, e);
  };
  const renderLoadingIcon = () => {
    if (loadingIcon) return _react().default.cloneElement(loadingIcon, {
      className: (0, _clsx().default)(bem('loading-icon')),
      fontSize: props.iconSize
    });
    return null;
  };
  const renderErrorIcon = () => {
    if (errorIcon) {
      return _react().default.cloneElement(errorIcon, {
        className: (0, _clsx().default)(bem('error-icon')),
        fontSize: props.iconSize
      });
    }
    return null;
  };
  const renderPlaceholder = () => {
    if (status.loading && showLoading) {
      return (0, _jsxRuntime().jsx)("div", Object.assign({
        className: (0, _clsx().default)(bem('loading')),
        onClick: props.onClick
      }, {
        children: renderLoadingIcon()
      }));
    }
    if (status.error && showError) {
      return (0, _jsxRuntime().jsx)("div", Object.assign({
        className: (0, _clsx().default)(bem('error')),
        onClick: props.onClick
      }, {
        children: renderErrorIcon()
      }));
    }
    return null;
  };
  const renderImage = () => {
    if (status.error || !props.src) {
      return null;
    }
    const attrs = {
      className: (0, _clsx().default)(bem('img')),
      style: {
        objectFit: fit
      }
    };
    return (0, _jsxRuntime().jsx)("img", Object.assign({
      ref: imgRef,
      alt: props.alt || 'img',
      src: props.src,
      onLoad: onLoad,
      onError: onError
    }, attrs));
  };
  return (0, _jsxRuntime().jsxs)("div", Object.assign({
    className: (0, _clsx().default)(props.className, bem({
      block,
      round: props.round
    })),
    style: style,
    onClick: props.onClick
  }, {
    children: [renderImage(), renderPlaceholder(), props.children]
  }));
};
var _default = exports.default = Image;