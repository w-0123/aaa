"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _jsxRuntime() {
  const data = require("react/jsx-runtime");
  _jsxRuntime = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = _interopRequireWildcard(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _clsx() {
  const data = _interopRequireDefault(require("clsx"));
  _clsx = function () {
    return data;
  };
  return data;
}
var _ConfigProviderContext = _interopRequireDefault(require("../config-provider/ConfigProviderContext"));
var _button = _interopRequireDefault(require("../button"));
var _utils = require("../utils");
var _getDefaultProps = require("../utils/get-default-props");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const [bem] = (0, _utils.createNamespace)('submit-bar');
const SubmitBar = p => {
  const props = (0, _getDefaultProps.mergeProps)(p, {
    buttonType: 'danger',
    decimalLength: 2,
    currency: 'Â¥',
    safeAreaInsetBottom: true
  });
  const {
    locale
  } = (0, _react().useContext)(_ConfigProviderContext.default);
  const renderText = () => {
    const {
      price,
      label,
      currency,
      textAlign,
      suffixLabel,
      decimalLength
    } = props;
    if (typeof +price === 'number') {
      const pricePair = (+price / 100).toFixed(+decimalLength).split('.');
      const decimal = decimalLength ? `.${pricePair[1]}` : '';
      return (0, _jsxRuntime().jsxs)("div", Object.assign({
        className: (0, _clsx().default)(bem('text')),
        style: {
          textAlign
        }
      }, {
        children: [(0, _jsxRuntime().jsx)("span", {
          children: label || locale.vanSubmitBar.label
        }), (0, _jsxRuntime().jsxs)("span", Object.assign({
          className: (0, _clsx().default)(bem('price'))
        }, {
          children: [currency, (0, _jsxRuntime().jsx)("span", Object.assign({
            className: (0, _clsx().default)(bem('price-integer'))
          }, {
            children: pricePair[0]
          })), decimal]
        })), suffixLabel && (0, _jsxRuntime().jsx)("span", Object.assign({
          className: (0, _clsx().default)(bem('suffix-label'))
        }, {
          children: suffixLabel
        }))]
      }));
    }
    return null;
  };
  const renderTip = () => {
    const {
      tip,
      tipIcon
    } = props;
    if (tip) {
      return (0, _jsxRuntime().jsxs)("div", Object.assign({
        className: (0, _clsx().default)(bem('tip'))
      }, {
        children: [tipIcon && _react().default.cloneElement(tipIcon, {
          className: (0, _clsx().default)(bem('tip-icon'))
        }), tip && (0, _jsxRuntime().jsx)("span", Object.assign({
          className: (0, _clsx().default)(bem('tip-text'))
        }, {
          children: tip
        }))]
      }));
    }
    return null;
  };
  const onClickButton = () => props === null || props === void 0 ? void 0 : props.onSubmit();
  const renderButton = () => {
    if (props.button) {
      return props.button;
    }
    return (0, _jsxRuntime().jsx)(_button.default, {
      round: true,
      type: props.buttonType,
      text: props.buttonText,
      className: (0, _clsx().default)(bem('button', props.buttonType)),
      color: props.buttonColor,
      loading: props.loading,
      disabled: props.disabled,
      onClick: onClickButton
    });
  };
  return (0, _jsxRuntime().jsxs)("div", Object.assign({
    className: (0, _clsx().default)(props.className, bem(), {
      'rv-safe-area-bottom': props.safeAreaInsetBottom
    }),
    style: props.style
  }, {
    children: [props.top, renderTip(), (0, _jsxRuntime().jsxs)("div", Object.assign({
      className: (0, _clsx().default)(bem('bar'))
    }, {
      children: [props.children, renderText(), renderButton()]
    }))]
  }));
};
var _default = exports.default = SubmitBar;