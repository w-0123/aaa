"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Watcher = exports.FormSubscribe = void 0;
function _react() {
  const data = _interopRequireWildcard(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _jsxRuntime() {
  const data = require("react/jsx-runtime");
  _jsxRuntime = function () {
    return data;
  };
  return data;
}
function _rcFieldForm() {
  const data = require("rc-field-form");
  _rcFieldForm = function () {
    return data;
  };
  return data;
}
var _hooks = require("../hooks");
var _useIsomorphicLayoutEffect = require("../hooks/use-isomorphic-layout-effect");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
//  移植自antd mobile: https://github.com/ant-design/ant-design-mobile/blob/master/src/components/form/form-subscribe.tsx
const FormSubscribe = props => {
  const update = (0, _hooks.useUpdate)();
  const form = (0, _react().useContext)(_rcFieldForm().FieldContext);
  return (0, _jsxRuntime().jsxs)(_jsxRuntime().Fragment, {
    children: [props.children(form.getFieldsValue(props.to), form), props.to.map(namePath => (0, _jsxRuntime().jsx)(Watcher, {
      form: form,
      namePath: namePath,
      onChange: update
    }, namePath.toString()))]
  });
};
exports.FormSubscribe = FormSubscribe;
const Watcher = exports.Watcher = (0, _react().memo)(props => {
  const value = (0, _rcFieldForm().useWatch)(props.namePath, props.form);
  (0, _useIsomorphicLayoutEffect.useIsomorphicUpdateLayoutEffect)(() => {
    props.onChange();
  }, [value]);
  return null;
});