"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _react() {
  const data = _interopRequireWildcard(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _tslib() {
  const data = require("tslib");
  _tslib = function () {
    return data;
  };
  return data;
}
function _jsxRuntime() {
  const data = require("react/jsx-runtime");
  _jsxRuntime = function () {
    return data;
  };
  return data;
}
function _clsx() {
  const data = _interopRequireDefault(require("clsx"));
  _clsx = function () {
    return data;
  };
  return data;
}
var _cell = _interopRequireDefault(require("../cell"));
var _CollapseContext = _interopRequireDefault(require("./CollapseContext"));
var _useLazyRender = _interopRequireDefault(require("../hooks/use-lazy-render"));
var _raf = require("../utils/raf");
var _hooks = require("../hooks");
var _utils = require("../utils");
var _getDefaultProps = require("../utils/get-default-props");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const [bem] = (0, _utils.createNamespace)('collapse-item');
const CollapseItem = (0, _react().forwardRef)((_a, ref) => {
  var {
      className,
      style
    } = _a,
    p = (0, _tslib().__rest)(_a, ["className", "style"]);
  const props = (0, _getDefaultProps.mergeProps)(p, {
    isLink: true,
    border: true
  });
  const {
    index
  } = props;
  const parent = (0, _react().useContext)(_CollapseContext.default);
  const wrapperRef = (0, _react().useRef)(null);
  const contentRef = (0, _react().useRef)(null);
  const name = (0, _react().useMemo)(() => {
    var _a;
    return (_a = props.name) !== null && _a !== void 0 ? _a : index;
  }, [index, props.name]);
  const expanded = (0, _react().useMemo)(() => {
    if (parent) {
      return parent.isExpanded(name);
    }
    return null;
  }, [parent, name]);
  const [show, setShow] = (0, _react().useState)(() => expanded);
  const lazyRender = (0, _useLazyRender.default)(show);
  const onTransitionEnd = () => {
    if (!expanded) {
      setShow(false);
    } else {
      wrapperRef.current.style.height = '';
    }
  };
  (0, _hooks.useUpdateEffect)(() => {
    if (expanded) {
      setShow(true);
    }
    (0, _raf.raf)(() => {
      if (!contentRef.current || !wrapperRef.current) {
        return;
      }
      const {
        offsetHeight
      } = contentRef.current;
      if (offsetHeight) {
        const contentHeight = `${offsetHeight}px`;
        wrapperRef.current.style.height = expanded ? 0 : contentHeight;
        // use double raf to ensure animation can start
        (0, _raf.doubleRaf)(() => {
          wrapperRef.current.style.height = expanded ? contentHeight : 0;
        });
      } else {
        onTransitionEnd();
      }
    });
  }, [expanded]);
  const toggle = (value = !expanded) => {
    parent.toggle(name, value);
  };
  const onClickTitle = () => {
    if (!props.disabled && !props.readOnly) {
      toggle();
    }
  };
  const renderTitle = () => {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const {
        border,
        disabled,
        children,
        readOnly
      } = props,
      others = (0, _tslib().__rest)(props, ["border", "disabled", "children", "readOnly"]);
    return (0, _jsxRuntime().jsx)(_cell.default, Object.assign({
      className: (0, _clsx().default)(bem('title', {
        disabled,
        expanded,
        borderless: !border
      })),
      "aria-expanded": String(expanded),
      onClick: onClickTitle
    }, others, {
      isLink: readOnly ? false : others.isLink,
      clickable: disabled || readOnly ? false : others.clickable
    }));
  };
  const renderContent = lazyRender(() => (0, _jsxRuntime().jsx)("div", Object.assign({
    ref: wrapperRef,
    className: (0, _clsx().default)(bem('wrapper')),
    onTransitionEnd: onTransitionEnd
  }, {
    children: (0, _jsxRuntime().jsx)("div", Object.assign({
      ref: contentRef,
      className: (0, _clsx().default)(bem('content'))
    }, {
      children: props.children
    }))
  })));
  (0, _react().useImperativeHandle)(ref, () => ({
    toggle
  }));
  return (0, _jsxRuntime().jsxs)("div", Object.assign({
    style: style,
    className: (0, _clsx().default)(className, bem({
      border: index && props.border
    }))
  }, {
    children: [renderTitle(), renderContent()]
  }));
});
var _default = exports.default = CollapseItem;