"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _jsxRuntime() {
  const data = require("react/jsx-runtime");
  _jsxRuntime = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = _interopRequireWildcard(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _clsx() {
  const data = _interopRequireDefault(require("clsx"));
  _clsx = function () {
    return data;
  };
  return data;
}
var _CollapseContext = _interopRequireDefault(require("./CollapseContext"));
var _constant = require("../utils/constant");
var _hooks = require("../hooks");
var _utils = require("../utils");
var _devLog = require("../utils/dev-log");
var _getDefaultProps = require("../utils/get-default-props");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function validateModelValue(modelValue, accordion) {
  if (accordion && Array.isArray(modelValue)) {
    (0, _devLog.devWarning)('Collapse', '"value" should not be Array in accordion mode');
    return false;
  }
  if (!accordion && !Array.isArray(modelValue)) {
    (0, _devLog.devWarning)('Collapse', '"value" should be Array in non-accordion mode');
    return false;
  }
  return true;
}
const [bem] = (0, _utils.createNamespace)('collapse');
const Collapse = p => {
  const props = (0, _getDefaultProps.mergeProps)(p, {
    border: true
  });
  const {
    accordion
  } = props;
  const {
    initExpanded = accordion ? '' : []
  } = props;
  const innerEffect = (0, _react().useRef)(false);
  const [expanded, setExpanded] = (0, _react().useState)(() => {
    var _a;
    return (_a = props.value) !== null && _a !== void 0 ? _a : initExpanded;
  });
  const updateName = name => {
    var _a;
    innerEffect.current = true;
    setExpanded(name);
    (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, name);
  };
  const toggle = (name, isExpanded) => {
    if (accordion) {
      if (name === expanded) {
        name = '';
      }
    } else if (isExpanded) {
      name = expanded.concat(name);
    } else {
      name = expanded.filter(activeName => activeName !== name);
    }
    updateName(name);
  };
  const isExpanded = name => {
    if (process.env.NODE_ENV !== 'production' && !validateModelValue(expanded, accordion)) {
      return false;
    }
    return accordion ? expanded === name : expanded.includes(name);
  };
  (0, _hooks.useUpdateEffect)(() => {
    if (innerEffect.current) {
      innerEffect.current = false;
      return;
    }
    if (props.value === undefined) return;
    setExpanded(props.value);
  }, [props.value]);
  return (0, _jsxRuntime().jsx)(_CollapseContext.default.Provider, Object.assign({
    value: {
      isExpanded,
      toggle
    }
  }, {
    children: (0, _jsxRuntime().jsx)("div", Object.assign({
      style: props.style,
      ref: props.nativeRef,
      className: (0, _clsx().default)(bem(), props.className, {
        [_constant.BORDER_TOP_BOTTOM]: props.border
      })
    }, {
      children: _react().default.Children.toArray(props.children).filter(Boolean).map((child, index) => _react().default.cloneElement(child, {
        index
      }))
    }))
  }));
};
var _default = exports.default = Collapse;