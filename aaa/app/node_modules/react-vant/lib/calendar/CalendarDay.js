"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _react() {
  const data = _interopRequireWildcard(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _jsxRuntime() {
  const data = require("react/jsx-runtime");
  _jsxRuntime = function () {
    return data;
  };
  return data;
}
function _clsx() {
  const data = _interopRequireDefault(require("clsx"));
  _clsx = function () {
    return data;
  };
  return data;
}
var _utils = require("../utils");
var _getDefaultProps = require("../utils/get-default-props");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const [bem] = (0, _utils.createNamespace)('calendar');
const CalenderDay = p => {
  const props = (0, _getDefaultProps.mergeProps)(p, {
    offset: 0
  });
  const style = (0, _react().useMemo)(() => {
    const {
      item,
      index,
      color,
      offset,
      rowHeight
    } = props;
    const iternalStyle = {
      height: rowHeight
    };
    if (item.type === 'placeholder') {
      iternalStyle.width = '100%';
      return iternalStyle;
    }
    if (index === 0) {
      iternalStyle.marginLeft = `${100 * offset / 7}%`;
    }
    if (color) {
      switch (item.type) {
        case 'end':
        case 'start':
        case 'start-end':
        case 'multiple-middle':
        case 'multiple-selected':
          iternalStyle.background = color;
          break;
        case 'middle':
          iternalStyle.color = color;
          break;
        default:
          break;
      }
    }
    return iternalStyle;
  }, [props.item, props.index, props.color, props.offset, props.rowHeight]);
  const onClick = () => {
    var _a;
    if (props.item.type !== 'disabled') {
      (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, props.item);
    }
  };
  const renderTopInfo = () => {
    const {
      topInfo
    } = props.item;
    if (topInfo || props.topInfoRender) {
      return (0, _jsxRuntime().jsx)("div", Object.assign({
        className: (0, _clsx().default)(bem('top-info'))
      }, {
        children: props.topInfoRender ? props.topInfoRender(props.item) : topInfo
      }));
    }
    return null;
  };
  const renderBottomInfo = () => {
    const {
      bottomInfo
    } = props.item;
    if (bottomInfo || props.bottomInfoRender) {
      return (0, _jsxRuntime().jsx)("div", Object.assign({
        className: (0, _clsx().default)(bem('bottom-info'))
      }, {
        children: props.bottomInfoRender ? props.bottomInfoRender(props.item) : bottomInfo
      }));
    }
    return null;
  };
  const renderContent = () => {
    const {
      item,
      color,
      rowHeight
    } = props;
    const {
      type,
      text
    } = item;
    const Nodes = (0, _jsxRuntime().jsxs)(_jsxRuntime().Fragment, {
      children: [renderTopInfo(), text, renderBottomInfo()]
    });
    if (type === 'selected') {
      return (0, _jsxRuntime().jsx)("div", Object.assign({
        className: (0, _clsx().default)(bem('selected-day')),
        style: {
          width: rowHeight,
          height: rowHeight,
          background: color
        }
      }, {
        children: Nodes
      }));
    }
    return Nodes;
  };
  const {
    type,
    className
  } = props.item;
  if (type === 'placeholder') {
    return (0, _jsxRuntime().jsx)("div", {
      className: (0, _clsx().default)(bem('day')),
      style: style
    });
  }
  return (0, _jsxRuntime().jsx)("div", Object.assign({
    role: 'gridcell',
    style: style,
    className: (0, _clsx().default)(bem('day', type), className),
    tabIndex: type === 'disabled' ? undefined : -1,
    onClick: onClick
  }, {
    children: renderContent()
  }));
};
var _default = exports.default = CalenderDay;