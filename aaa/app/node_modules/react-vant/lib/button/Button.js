"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _tslib() {
  const data = require("tslib");
  _tslib = function () {
    return data;
  };
  return data;
}
function _jsxRuntime() {
  const data = require("react/jsx-runtime");
  _jsxRuntime = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = _interopRequireWildcard(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _clsx() {
  const data = _interopRequireDefault(require("clsx"));
  _clsx = function () {
    return data;
  };
  return data;
}
var _loading = _interopRequireDefault(require("../loading"));
var _constant = require("../utils/constant");
var _ButtonContext = _interopRequireDefault(require("./ButtonContext"));
var _utils = require("../utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const [bem] = (0, _utils.createNamespace)('button');
const Button = props => {
  const {
      color,
      loading,
      className,
      hairline,
      loadingText,
      round,
      square,
      plain: _plain,
      block: _block,
      loadingType,
      nativeType: _nativeType,
      iconPosition: _iconPosition
    } = props,
    restProps = (0, _tslib().__rest)(props, ["color", "loading", "className", "hairline", "loadingText", "round", "square", "plain", "block", "loadingType", "nativeType", "iconPosition"]);
  const {
    parent
  } = (0, _react().useContext)(_ButtonContext.default);
  const size = _react().default.useMemo(() => props.size || (parent === null || parent === void 0 ? void 0 : parent.size) || 'normal', [parent === null || parent === void 0 ? void 0 : parent.size, props.size]);
  const type = _react().default.useMemo(() => props.type || (parent === null || parent === void 0 ? void 0 : parent.type) || 'default', [parent === null || parent === void 0 ? void 0 : parent.type, props.type]);
  const plain = _react().default.useMemo(() => _plain !== null && _plain !== void 0 ? _plain : parent === null || parent === void 0 ? void 0 : parent.plain, [parent === null || parent === void 0 ? void 0 : parent.plain, _plain]);
  const block = _react().default.useMemo(() => _block !== null && _block !== void 0 ? _block : parent === null || parent === void 0 ? void 0 : parent.block, [parent === null || parent === void 0 ? void 0 : parent.block, _block]);
  const iconPosition = _react().default.useMemo(() => _iconPosition || (parent === null || parent === void 0 ? void 0 : parent.iconPosition) || 'left', [parent === null || parent === void 0 ? void 0 : parent.iconPosition, _iconPosition]);
  const disabled = _react().default.useMemo(() => {
    var _a;
    return (_a = props.disabled) !== null && _a !== void 0 ? _a : parent === null || parent === void 0 ? void 0 : parent.disabled;
  }, [parent === null || parent === void 0 ? void 0 : parent.disabled, props.disabled]);
  const nativeType = _react().default.useMemo(() => _nativeType || (parent === null || parent === void 0 ? void 0 : parent.nativeType) || 'button', [parent === null || parent === void 0 ? void 0 : parent.nativeType, _nativeType]);
  const tag = _react().default.useMemo(() => props.tag || (parent === null || parent === void 0 ? void 0 : parent.tag) || 'button', [parent === null || parent === void 0 ? void 0 : parent.tag, props.tag]);
  const TagElement = tag;
  const classes = (0, _clsx().default)(className, bem([type, size, {
    plain,
    loading,
    disabled,
    hairline,
    block,
    round,
    square
  }]), {
    [_constant.BORDER_SURROUND]: hairline
  }, props.shadow && `${_constant.SHADOW}--${+props.shadow}`);
  const style = Object.assign({}, props.style);
  if (color) {
    style.color = plain ? color : _constant.WHITE;
    if (!plain) {
      // Use background instead of backgroundColor to make linear-gradient work
      style.background = color;
    }
    // hide border when color is linear-gradient
    if (color.indexOf('gradient') !== -1) {
      style.border = 0;
    } else {
      style.borderColor = color;
    }
  }
  const onClick = event => {
    if (!loading && !disabled && props.onClick) {
      props.onClick(event);
    }
  };
  const renderLoadingIcon = () => {
    if (loading) {
      const {
        loadingSize = '20px'
      } = props;
      return (0, _jsxRuntime().jsx)(_loading.default, {
        className: (0, _clsx().default)(bem('loading')),
        size: loadingSize,
        type: loadingType,
        color: type === 'default' ? undefined : ''
      });
    }
    return null;
  };
  const renderIcon = () => {
    if (props.loading) {
      return renderLoadingIcon();
    }
    if (props.icon) {
      return _react().default.cloneElement(props.icon, {
        className: (0, _clsx().default)(bem('icon'))
      });
    }
    return null;
  };
  const renderText = () => {
    let text;
    if (loading) {
      text = loadingText;
    } else {
      text = props.children || props.text;
    }
    if (text) {
      return (0, _jsxRuntime().jsx)("span", Object.assign({
        className: (0, _clsx().default)(bem('text'))
      }, {
        children: text
      }), 'text');
    }
    return null;
  };
  const renderContent = () => (0, _jsxRuntime().jsxs)("div", Object.assign({
    className: (0, _clsx().default)(bem('content'))
  }, {
    children: [iconPosition === 'left' && renderIcon(), renderText(), iconPosition === 'right' && renderIcon()]
  }));
  return (0, _jsxRuntime().jsx)(TagElement, Object.assign({}, restProps, {
    disabled: disabled,
    className: classes,
    style: style,
    type: nativeType,
    onClick: onClick
  }, {
    children: renderContent()
  }));
};
var _default = exports.default = Button;