"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _react() {
  const data = _interopRequireWildcard(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _jsxRuntime() {
  const data = require("react/jsx-runtime");
  _jsxRuntime = function () {
    return data;
  };
  return data;
}
function _clsx() {
  const data = _interopRequireDefault(require("clsx"));
  _clsx = function () {
    return data;
  };
  return data;
}
var _button = _interopRequireDefault(require("../button"));
var _ActionBarContext = _interopRequireDefault(require("./ActionBarContext"));
var _utils = require("../utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const [bem] = (0, _utils.createNamespace)('action-bar-button');
const ActionBarButton = props => {
  const {
    type,
    icon,
    text,
    color,
    loading,
    disabled,
    index
  } = props;
  const {
    parent
  } = (0, _react().useContext)(_ActionBarContext.default);
  const isFirst = (0, _react().useMemo)(() => {
    if (parent) {
      const prev = parent.children[index - 1];
      return !(prev && 'isButton' in prev.type);
    }
    return false;
  }, [index, parent]);
  const isLast = (0, _react().useMemo)(() => {
    if (parent) {
      const next = parent.children[index + 1];
      return !(next && 'isButton' in next.type);
    }
    return false;
  }, [index, parent]);
  return (0, _jsxRuntime().jsx)(_button.default, Object.assign({
    className: (0, _clsx().default)(props.className, bem([type, {
      last: isLast,
      first: isFirst
    }])),
    style: props.style,
    size: 'large',
    type: type,
    icon: icon,
    color: color,
    loading: loading,
    disabled: disabled,
    onClick: props.onClick
  }, {
    children: props.children ? props.children : text
  }));
};
const ActionBarButtonNameSpace = Object.assign(ActionBarButton, {
  isButton: true
});
var _default = exports.default = ActionBarButtonNameSpace;