"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.supportsPassive = exports.default = void 0;
function _react() {
  const data = _interopRequireWildcard(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
var _utils = require("../utils");
var _getTargetElement = require("../utils/dom/getTargetElement");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/* eslint-disable react-hooks/rules-of-hooks */
/* eslint-disable @typescript-eslint/no-unused-vars */

// https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener#使用_passive_改善的滚屏性能
let supportsPassive = exports.supportsPassive = false;
if (_utils.inBrowser) {
  try {
    const opts = {};
    Object.defineProperty(opts, 'passive', {
      get() {
        exports.supportsPassive = supportsPassive = true;
      }
    });
    window.addEventListener('test-passive', null, opts);
    // eslint-disable-next-line no-empty
  } catch (e) {}
}
function useEventListener(type, listener, options = {}) {
  if (!_utils.inBrowser) {
    return;
  }
  const {
    target = window,
    passive = false,
    capture = false,
    depends = []
  } = options;
  let attached;
  const add = () => {
    const element = (0, _getTargetElement.getTargetElement)(target);
    if (element && !attached) {
      element.addEventListener(type, listener, supportsPassive ? {
        capture,
        passive
      } : capture);
      attached = true;
    }
  };
  const remove = () => {
    const element = (0, _getTargetElement.getTargetElement)(target);
    if (element && attached) {
      element.removeEventListener(type, listener, capture);
      attached = false;
    }
  };
  // https://stackoverflow.com/questions/55265255/react-usestate-hook-event-handler-using-initial-state
  (0, _react().useEffect)(() => {
    add();
    return () => remove();
  }, [target, ...depends]);
}
var _default = exports.default = useEventListener;