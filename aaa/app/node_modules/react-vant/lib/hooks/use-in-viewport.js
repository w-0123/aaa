"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _react() {
  const data = _interopRequireWildcard(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
var _getTargetElement = require("../utils/dom/getTargetElement");
var _useEffectWithTarget = _interopRequireDefault(require("./use-effect-with-target"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useInViewport(target, options) {
  const [state, setState] = (0, _react().useState)();
  const [ratio, setRatio] = (0, _react().useState)();
  (0, _useEffectWithTarget.default)(() => {
    const el = (0, _getTargetElement.getTargetElement)(target);
    if (!el) {
      return;
    }
    const observer = new IntersectionObserver(entries => {
      for (const entry of entries) {
        setRatio(entry.intersectionRatio);
        setState(entry.isIntersecting);
      }
    }, Object.assign(Object.assign({}, options), {
      root: (0, _getTargetElement.getTargetElement)(options === null || options === void 0 ? void 0 : options.root)
    }));
    observer.observe(el);
    return () => {
      observer.disconnect();
    };
  }, [], target);
  return [state, ratio];
}
var _default = exports.default = useInViewport;