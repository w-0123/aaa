"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useFormSmart;
function _react() {
  const data = _interopRequireWildcard(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
var _utils = require("../utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function isEmpty(val) {
  if ((0, _utils.isObject)(val)) {
    return JSON.stringify(val) === '{}';
  }
  return true;
}
function useFormSmart(option = {}) {
  const {
    value,
    sync
  } = option;
  const ref = (0, _react().useRef)(null);
  const [once, setOnce] = (0, _react().useState)(false);
  const set = (0, _react().useCallback)(values => {
    var _a;
    (_a = ref === null || ref === void 0 ? void 0 : ref.current) === null || _a === void 0 ? void 0 : _a.setFieldsValue(values);
  }, []);
  const get = (0, _react().useCallback)(name => {
    var _a;
    return (_a = ref === null || ref === void 0 ? void 0 : ref.current) === null || _a === void 0 ? void 0 : _a.getFieldValue(name);
  }, []);
  const submit = (0, _react().useCallback)(() => {
    var _a;
    (_a = ref === null || ref === void 0 ? void 0 : ref.current) === null || _a === void 0 ? void 0 : _a.submit();
  }, []);
  const clear = (0, _react().useCallback)(() => {
    var _a;
    (_a = ref === null || ref === void 0 ? void 0 : ref.current) === null || _a === void 0 ? void 0 : _a.resetFields();
  }, []);
  const getAll = (0, _react().useCallback)(() => {
    var _a;
    return (_a = ref === null || ref === void 0 ? void 0 : ref.current) === null || _a === void 0 ? void 0 : _a.getFieldsValue();
  }, []);
  (0, _react().useEffect)(() => {
    if (!isEmpty(value)) {
      if (sync) {
        set(value);
      } else if (!once) {
        set(value);
        setOnce(true);
      }
    }
  }, [value]);
  const methods = {
    set,
    get,
    submit,
    clear,
    getAll
  };
  return [ref, methods];
}