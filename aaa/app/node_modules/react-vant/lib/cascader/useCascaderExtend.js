"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCascaderExtend = useCascaderExtend;
function _react() {
  const data = _interopRequireWildcard(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useCascaderExtend(options, keys, value) {
  const {
    childrenKey,
    valueKey
  } = keys;
  const depth = (0, _react().useMemo)(() => {
    let depth = 0;
    function traverse(options, currentDepth) {
      if (currentDepth > depth) depth = currentDepth;
      const nextDepth = currentDepth + 1;
      options.forEach(option => {
        if (option[childrenKey]) {
          traverse(option[childrenKey], nextDepth);
        }
      });
    }
    traverse(options, 1);
    return depth;
  }, [options, childrenKey]);
  const tabs = (0, _react().useMemo)(() => {
    var _a;
    if (!value || !value.length) {
      return (_a = [options]) !== null && _a !== void 0 ? _a : [];
    }
    return value.reduce((a, v, i) => {
      if (!v) return a;
      const next = a[i].find(option => option[valueKey] === value[i]);
      if (next && next[childrenKey]) a.push(next[childrenKey]);
      return a;
    }, [options]);
  }, [value, childrenKey, valueKey, options]);
  const items = (0, _react().useMemo)(() => {
    return value.map((val, i) => {
      var _a;
      const item = (_a = tabs[i].find(tab => tab[valueKey] === val)) !== null && _a !== void 0 ? _a : undefined;
      return item;
    });
  }, [value, valueKey, tabs]);
  return {
    tabs,
    items,
    depth
  };
}